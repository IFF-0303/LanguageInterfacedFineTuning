
configs.py
*.json
*.tar
/results/**
*.npy
*.jsonl
*.pt
*.pkt
*.pkl
*.gz
*.pth
/data/**
.vscode/**
# Byte-compiled / optimized / DLL files
__pycache__/**
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/**
develop-eggs/**
dist/**
downloads/**
eggs/**
.eggs/**
lib/**
lib64/**
parts/**
sdist/**
var/**
wheels/**
pip-wheel-metadata/**
share/python-wheels/**
*.egg-info/**
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/**
.tox/**
.nox/**
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/**
.pytest_cache/**

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/**
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/**

# PyBuilder
target/**

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/**
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/**

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/**
venv/**
ENV/**
env.bak/**
venv.bak/**

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/**
classification/results/gpt-j/pfmnist/pytorch_model.bin
classification/results/gpt-j/mnist_best_model.pth
classification/results/gpt-j/pytorch_model.bin
classification/results/gpt-j/mnist/pytorch_model.bin
classification/results/gpt-j/permuted_mnist/pytorch_model.bin
classification/results/gpt-j/pmnist/pytorch_model.bin
classification/results/gpt-j/2_best_model.pth
.git/objects/pack/tmp_pack_rK3xLl
results/gpt-j/pytorch_model.bin
classification/data/mnist_adv_mlp_0_01.npy
classification/data/fmnist.npy
classification/data/mnist_adv_mlp_0_1.npy
classification/data/fmnist_train.csv
classification/data/mnist_adv_lenet0_3.npy
classification/data/mnist_adv_mlp_0_3.npy
classification/results/gpt-j/pfmnist/pytorch_model.bin
classification/results/gpt-j/mnist_best_model.pth
classification/results/gpt-j/pytorch_model.bin
classification/results/gpt-j/mnist/pytorch_model.bin
classification/results/gpt-j/permuted_mnist/pytorch_model.bin
classification/results/gpt-j/pmnist/pytorch_model.bin
classification/results/gpt-j/2_best_model.pth
classification/npy/mnist_X_train.npy
.git/objects/pack/tmp_pack_rK3xLl
results/gpt-j/pytorch_model.bin
